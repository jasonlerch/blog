{
  "hash": "d199e511b6ed9ab4b4081e15fe7fb1a4",
  "result": {
    "markdown": "---\ntitle: \"Better MRIcrotome brain outlines\"\ndescription: \"How to make better brain outlines for MRIcrotome\"\nauthor: \"Jason Lerch\"\ndate: \"2023/09/16\"\ncategories: [R, MRIcrotome, RMINC]\ndraft: false\nengine: knitr\nnumber-sections: true\n---\n\n\nBrain outlines are used routinely in MRIcrotome sliceSeries for showing slice locations, plus they can have value in their own right for replacing the full grey-scale background with an outline. By default the outlines take a bit of trial and error to find the right isointensity lines; in some cases no truly good outlines can be generated. Here I will show an alternate way of generating an outline based on having a hierarchical segmentation present.\n\n## Setting up\n\nFirst we'll load an existing dataset and generate the hierarchical segmentation representations. For those at Oxford using the BMRC cluster you can follow along, for anyone else you'll have to substitute your own dataset.\n\nFirst step, read the information about the scans.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ngfw2 <- read_csv(\"exercise-gfw2.csv\")\n```\n:::\n\n\nSo at this point we have the gf variable containing info about all our files, and gfw2 subsetting them just to the two week timepoint (this is from mice being given access to an exercise wheel).\n\nNext we'll load the final non-linear average, the segmented final nonlinear average, and build all the volumes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RMINC)\n\n# read the anatomy and labels \nnlin <- mincArray(mincGetVolume(\"/well/lerch/users/yrf023/plasticity/plasticity-2023-03-10_nlin/plasticity-2023-03-10-nlin-3.mnc\"))\nlabels <- mincArray(mincGetVolume(\"/well/lerch/users/yrf023/plasticity/plasticity-2023-03-10_nlin/plasticity-2023-03-10-nlin-3/plasticity-2023-03-10-nlin-3_voted.mnc\"))\n\n# get all the volumes\nallvolsw2 <- anatGetAll(gfw2$labels, defs=\"/well/lerch/shared/tools/atlases/Dorr_2008_Steadman_2013_Ullmann_2013/mappings/Dorr_2008_Steadman_2013_Ullmann_2013_mapping_of_labels.csv\", method=\"labels\")\n```\n:::\n\n\nAnd now we put the labelled atlas into it's hierarchy.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_2de3e6f5f15475f960e0aaebc88ead79'}\n\n```{.r .cell-code}\n# there's a warning that spews everywhere that needs to be fixed in RMINC, but causes no harm.\n# so for now I'll suppress these warnings\nsuppressWarnings({\nhdefs <- makeMICeDefsHierachical(\"/well/lerch/shared/tools/atlases/Dorr_2008_Steadman_2013_Ullmann_2013/mappings/Dorr_2008_Steadman_2013_Ullmann_2013_mapping_of_labels.csv\", \"/well/lerch/shared/tools/atlases/Allen_Brain/Allen_hierarchy_definitions.json\")\nhvolsw2 <- addVolumesToHierarchy(hdefs, allvolsw2)\n})\n```\n:::\n\n\n## A basic example\n\nLet's do a basic example of running a simple linear model, showing it on a brain alongside a slice indicator and legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MRIcrotome)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'MRIcrotome'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    legend\n```\n:::\n\n```{.r .cell-code}\nlibrary(grid)\n\n# a simple linear model against group\nvs <- mincLm(reljacs ~ group, gfw2, mask = \"/well/lerch/users/yrf023/plasticity/plasticity-2023-03-10_nlin/plasticity-2023-03-10-nlin-3_mask.mnc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMethod: lm\nNumber of volumes: 18\nVolume sizes: 161 319 210\nN: 18 P: 2\nIn slice \n 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100  101  102  103  104  105  106  107  108  109  110  111  112  113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128  129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144  145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \nDone\n```\n:::\n\n```{.r .cell-code}\n# show it as a 3 by 3 slice series\nsliceSeries(nrow=3, ncol=3, begin=60, end=250) %>%\n  anatomy(nlin, low=700, high=1400) %>%\n  overlay(mincArray(vs, \"tvalue-grouprunning\"), low=2, high=6, symmetric=T) %>%\n  legend(\"t-statistics\") %>%\n  contourSliceIndicator(nlin, levels=c(700, 1400)) %>%\n  draw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nSo that looks roughly right - the slice indicator, at the top right, gives a pretty good idea of where the brain is located. But it's not great; let's try a few different contours to see what might look better.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsliceSeries(nrow=3, ncol=3, begin=60, end=250) %>%\n  anatomy(nlin, low=700, high=1400) %>%\n  contours(nlin, levels=c(700, 900, 1100, 1400), col = c(\"red\", \"green\", \"blue\", \"purple\")) %>%\n  draw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nLots of fiddling could be done getting the exact right intensity contours, but it'll be a challenge to get it just right.\n\n## Contours based on segmentations\n\nSo here's the trick - the perfect outline is inherently in our segmentation. First, let's view the segmentation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsliceSeries(nrow=5, ncol=1, begin=60, end=250) %>%\n  anatomy(nlin, low=700, high=1400) %>%\n  addtitle(\"anatomy\") %>%\n  sliceSeries() %>%\n  anatomy() %>%\n  overlay(hanatToVolume(hvolsw2, labels, \"color_hex_triplet\"), low=0, high=1) %>%\n  addtitle(\"segmentation\") %>%\n  draw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNow the key part here is that the labels are in a hierarchy. A clean outline could thus be taken if we use just the first parts of that hierarchy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.tree)\n# create a copy of the hierarchical tree\nhdefs2 <- Clone(hvolsw2)\n# and prune it to just the first four levels \nhdefs2$Prune(function(x) x$level<4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 'hdefs2$Prune' is deprecated.\nUse 'Prune(node, ...)' instead.\nSee help(\"Deprecated\")\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 495\n```\n:::\n\n```{.r .cell-code}\n# print it to see what it looks like\nprint(hdefs2, limit=Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                               levelName\n1  root2                                                \n2   <U+00A6>--Basic cell groups and regions             \n3   <U+00A6>   <U+00A6>--Cerebrum                       \n4   <U+00A6>   <U+00A6>--Brain stem                     \n5   <U+00A6>   <U+00B0>--Cerebellum                     \n6   <U+00A6>--fiber tracts                              \n7   <U+00A6>   <U+00A6>--cranial nerves                 \n8   <U+00A6>   <U+00A6>--medial forebrain bundle system \n9   <U+00A6>   <U+00A6>--cerebellum related fiber tracts\n10  <U+00A6>   <U+00A6>--lateral forebrain bundle system\n11  <U+00A6>   <U+00B0>--extrapyramidal fiber systems   \n12  <U+00B0>--ventricular systems                       \n13      <U+00A6>--cerebral aqueduct                     \n14      <U+00A6>--fourth ventricle                      \n15      <U+00A6>--lateral ventricle                     \n16      <U+00B0>--third ventricle                       \n```\n:::\n:::\n\n\nNow create an outline based on this pruned hierarchy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsliceSeries(nrow=5, ncol=1, begin=60, end=250) %>%\n  anatomy(nlin, low=700, high=1400) %>%\n  sliceSeries() %>%\n  anatomy() %>%\n  overlay(hanatToVolume(hvolsw2, labels, \"color_hex_triplet\"), low=0, high=1) %>%\n  sliceSeries() %>% anatomy() %>%\n  contours(hanatToVolume(hdefs2, labels, \"position\"), levels=c(0.5, 1.5, 2.5, 3.5), col=\"red\") %>%\n  draw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nAnd there you have an almost perfect outline of the brain. So let's recreate that earlier figure with the cleaner outline:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsliceSeries(nrow=3, ncol=3, begin=60, end=250) %>%\n  anatomy(nlin, low=700, high=1400) %>%\n  overlay(mincArray(vs, \"tvalue-grouprunning\"), low=2, high=6, symmetric=T) %>%\n  legend(\"t-statistics\") %>%\n  contourSliceIndicator(hanatToVolume(hdefs2, labels, \"position\"), levels=c(0.5, 1.5, 2.5, 3.5)) %>%\n  draw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nVoila.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}