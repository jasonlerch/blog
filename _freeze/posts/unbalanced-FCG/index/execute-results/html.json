{
  "hash": "b39ac344bc81fd76995ca45a1c7d9b1a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Unbalanced Four Core Genotype Analyses\"\ndescription: \"You want to run a four core genotype analysis without having all four genotypes\"\nauthor: \"Jason Lerch and Kamila Szulc-Lerch\"\ndate: \"2025-02-08\"\ndraft: true\ncategories: [R]\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n\nThis came out of a discussion related to a rat model designed to explore the same question at the Four Core Genotype mouse model: what happens if you don't have all four arms? Are you hopelessly confounded? The short answer is no under some assumptions. We'll explore that with some simple simulations.\n\nTo start with we'll create a function to simulate the four core genotype model and then drop one of the arms.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(broom)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerateFCGData <- function(\n    XXM = 0,\n    XXF = 0,\n    XYM = 0,\n    XYF = 0,\n    std = 1,\n    ngroup=10) {\n  rbind(\n    data.frame(group=\"XXM\", gonad=\"T\", chromosomes=\"XX\", \n               volume = rnorm(ngroup, XXM, sd=std)),\n    data.frame(group=\"XXF\", gonad=\"O\", chromosomes=\"XX\", \n               volume = rnorm(ngroup, XXF, sd=std)),\n    data.frame(group=\"XYM\", gonad=\"T\", chromosomes=\"XY\", \n               volume = rnorm(ngroup, XYM, sd=std)),\n    data.frame(group=\"XYF\", gonad=\"O\", chromosomes=\"XY\", \n               volume = rnorm(ngroup, XYF, sd=std))\n  )\n}\n```\n:::\n\n\n\nLet's assume that having male gonads increases the output variable by 2 standard deviations. That would look as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddd <- generateFCGData(XYM=2, XXM=2, ngroup = 500)\n  \nggplot(ddd) + \n  aes(x=group, y=volume, fill=chromosomes) + \n  geom_boxplot() + \n  facet_wrap(~gonad, scales=\"free_x\") +\n  scale_fill_brewer(palette = \"Set1\") + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nLet's run the stats three ways, first separately fitting gonads and chromosomes and then using an additive model incorporating both chromosomes and gonads:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary( ( lfg <- lm(volume ~ gonad, ddd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ gonad, data = ddd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.7454 -0.6958 -0.0124  0.6561  3.9788 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.007366   0.031183   0.236    0.813    \ngonadT      1.975542   0.044100  44.797   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9861 on 1998 degrees of freedom\nMultiple R-squared:  0.5011,\tAdjusted R-squared:  0.5008 \nF-statistic:  2007 on 1 and 1998 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary( ( lfc <- lm(volume ~ chromosomes, ddd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ chromosomes, data = ddd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.2282 -1.0332  0.0045  1.0425  4.9794 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    1.00793    0.04415   22.83   <2e-16 ***\nchromosomesXY -0.02559    0.06243   -0.41    0.682    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.396 on 1998 degrees of freedom\nMultiple R-squared:  8.408e-05,\tAdjusted R-squared:  -0.0004164 \nF-statistic: 0.168 on 1 and 1998 DF,  p-value: 0.6819\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary( ( lfgc <- lm(volume ~ gonad + chromosomes, ddd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ gonad + chromosomes, data = ddd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.7326 -0.6905 -0.0081  0.6563  3.9916 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    0.02016    0.03820   0.528    0.598    \ngonadT         1.97554    0.04411  44.790   <2e-16 ***\nchromosomesXY -0.02559    0.04411  -0.580    0.562    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9863 on 1997 degrees of freedom\nMultiple R-squared:  0.5012,\tAdjusted R-squared:  0.5007 \nF-statistic:  1003 on 2 and 1997 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nThe output here is correct - no matter how analyzed, the statistics tell us that having testes increases the output by 2 (everything is in units of standard deviation here), and there is no effect of chromosomes.\n\nLet's now drop one of the arms, and assume that rather than having all four groups we do not have the XY female group. The exact same data would look like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddd <- ddd %>% filter(group!=\"XYF\")\nggplot(ddd) + \n  aes(x=group, y=volume, fill=chromosomes) + \n  geom_boxplot() + \n  facet_wrap(~gonad, scales=\"free_x\") +\n  scale_fill_brewer(palette = \"Set1\") + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nAnd we run the same statistics:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary( ( lrg <- lm(volume ~ gonad, ddd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ gonad, data = ddd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.7454 -0.6740 -0.0181  0.6457  3.9788 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.001365   0.044138  -0.031    0.975    \ngonadT       1.984273   0.054058  36.706   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.987 on 1498 degrees of freedom\nMultiple R-squared:  0.4735,\tAdjusted R-squared:  0.4732 \nF-statistic:  1347 on 1 and 1498 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary( ( lrc <- lm(volume ~ chromosomes, ddd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ chromosomes, data = ddd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.2282 -0.9186  0.0336  0.8992  4.0131 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    1.00793    0.04066   24.79   <2e-16 ***\nchromosomesXY  0.94065    0.07043   13.36   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.286 on 1498 degrees of freedom\nMultiple R-squared:  0.1064,\tAdjusted R-squared:  0.1058 \nF-statistic: 178.4 on 1 and 1498 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary( ( lrgc <- lm(volume ~ gonad + chromosomes, ddd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ gonad + chromosomes, data = ddd)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.7111 -0.6767 -0.0226  0.6470  4.0131 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -0.001365   0.044135  -0.031    0.975    \ngonadT         2.018595   0.062416  32.341   <2e-16 ***\nchromosomesXY -0.068643   0.062416  -1.100    0.272    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9869 on 1497 degrees of freedom\nMultiple R-squared:  0.474,\tAdjusted R-squared:  0.4733 \nF-statistic: 674.4 on 2 and 1497 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nLosing one arm of the study means that the design is now unbalanced. Looking at the three different stats models shows that modelling only gonads gives the correct answer of a 2 SD increase, but modelling only chromosomes gives an incorrect answer of an increase of 1SD when having XY chromosomes. What saves us is covarying - modelling gonads + chromosomes again returns the correct answer, since the model simultaneously estimates the effects of gonads and chromosomes while controlling for the other.\n\nLet's show that graphically:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallStats <- rbind(\n  tidy(lfg, conf.int = T) %>% mutate(model = \"FCG: G\"),\n  tidy(lfc, conf.int = T) %>% mutate(model = \"FCG: C\"),\n  tidy(lfgc, conf.int = T) %>% mutate(model = \"FCG: G + C\"),\n  tidy(lrg, conf.int = T) %>% mutate(model = \"uFCG: G\"),\n  tidy(lrc, conf.int = T) %>% mutate(model = \"uFCG: C\"),\n  tidy(lrgc, conf.int = T) %>% mutate(model = \"uFCG: G + C\")\n) %>% filter(term != \"(Intercept)\")\n\ncols <- RColorBrewer::brewer.pal(2, \"Set2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in RColorBrewer::brewer.pal(2, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n```\n\n\n:::\n\n```{.r .cell-code}\nallStats %>% \n  ggplot() + \n  aes(x=term, y=estimate, colour=term) + \n  geom_point() + \n  geom_errorbar(aes(ymin=conf.low, ymax=conf.high)) + \n  facet_wrap(.~model, scale=\"free_x\", nrow=1) + \n  theme_classic() + \n  theme(axis.text.x = element_text(angle=45, hjust=1)) + \n  scale_color_manual(values = cols[1:2]) + \n  geom_hline(yintercept = 2, color=cols[2]) +\n  geom_hline(yintercept = 0, color=cols[1]) +\n  labs(title=\"Model effects\", caption=\"FCG = balanced four core genotypes; uFCG = unbalanced four core genotypes (no XYF); C = chromosomes; G = gonads\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nNow, can't we just do a simple t-test comparing two groups with the desired contrasts which avoids the issue of more complex modelling? Yes, that works:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm(volume ~ group, data = ddd %>% filter(group %in% c(\"XXF\", \"XXM\"))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ group, data = ddd %>% filter(group %in% \n    c(\"XXF\", \"XXM\")))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.2189 -0.6489 -0.0309  0.6375  3.2199 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.001365   0.044331  -0.031    0.975    \ngroupXXM     2.018595   0.062694  32.198   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9913 on 998 degrees of freedom\nMultiple R-squared:  0.5095,\tAdjusted R-squared:  0.509 \nF-statistic:  1037 on 1 and 998 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nBut do we pay a price in statistical power? Let's compare the simple two group comparison to the linear model with all three groups (in the unbalanced FCG case) estimating both a gonad and a chromosome effect.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimNtimes <- function(nsims=100, effectSize=2, ngroup=20) {\n  bFCG <- map(1:nsims, ~ generateFCGData(XYM=effectSize, \n                                         XXM=effectSize, \n                                         ngroup=ngroup))\n  uFCG <- map(bFCG, ~ .x %>% filter(group!=\"XYF\"))\n  tgroup <- map(bFCG, ~ .x %>% filter(group %in% c(\"XXF\", \"XXM\")))\n  \n  lbFCG <- map(bFCG, ~ lm(volume ~ gonad + chromosomes, data=.x))\n  luFCG <- map(uFCG, ~ lm(volume ~ gonad + chromosomes, data=.x))\n  ltgroup <- map(tgroup, ~ lm(volume ~ group, data=.x))\n  \n  tlbFCG <- map(lbFCG, tidy)\n  tluFCG <- map(luFCG, tidy)\n  tltgroup <- map(ltgroup, tidy)\n  \n  data.frame(\n    bFCG = map_dbl(tlbFCG, ~.x %>% filter(term == \"gonadT\") %>% pull(p.value)),\n    uFCG = map_dbl(tluFCG, ~.x %>% filter(term == \"gonadT\") %>% pull(p.value)),\n    twogroup = map_dbl(tltgroup, ~.x %>% filter(term == \"groupXXM\") %>% pull(p.value))\n  )\n  \n}\n\nallSims <- map(seq(0, 2, by=0.1), ~ simNtimes(nsims=200, effectSize=.x, ngroup = 10) %>% mutate(d=.x))\npowerDF <- map_dfr(allSims, ~ .x) %>% group_by(d) %>% summarise_at(vars(bFCG:twogroup), function(x) mean(x<0.05))\n\npowerDF %>% \n  pivot_longer(bFCG:twogroup, values_to = \"power\") %>% \n  ggplot() + aes(x=d, y=power, colour=name) + \n  geom_smooth(method=\"gam\", formula=y~s(x, k=8), se=F) + \n  scale_color_brewer(\"Model\", palette = \"Dark2\", \n                     label=c(\"balanced FCG\", \n                             \"unbalanced FCG\", \n                             \"two group comparison\")) + \n  theme_classic() + \n  xlab(\"Simulated effect size\") + \n  labs(title=\"Power of gonad effect\", caption =\"Assuming n=10 per group\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nNot really - this shows the power we lose when moving from a balanced FCG dataset to the unbalanced one missing one group. But the power is the same between the two ways of modelling the unbalanced dataset, indicating that in the case of the unbalanced design (i.e. only having three rather than all four groups of the FCG model) the gonad and chromosome terms of the statistical model essentially reduce down to a two-group comparison.\n\nLet's expand this to the FCG-like rat model (male arm only for now). There are four genotypes:\n\n| Genotype | Gonads  | Sex Chromosomes | Sry            |\n|----------|---------|-----------------|----------------|\n| XX       | Ovaries | XX              | None           |\n| XX-Sry   | Testes  | XX              | Transgene      |\n| XY       | Testes  | XY              | WT             |\n| XY-Sry   | Testes  | XY              | WT + Transgene |\n\nOnce again we need a function to simulate from this dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerateFCGRatData <- function(\n    XX = 0,\n    XXSry = 0,\n    XY = 0,\n    XYSry = 0,\n    std = 1,\n    ngroup=10) {\n  rbind(\n    data.frame(group=\"XX\", gonad=\"O\", chromosomes=\"XX\", sry=0,\n               volume = rnorm(ngroup, XX, sd=std)),\n    data.frame(group=\"XXSry\", gonad=\"T\", chromosomes=\"XX\", sry=1,\n               volume = rnorm(ngroup, XXSry, sd=std)),\n    data.frame(group=\"XY\", gonad=\"T\", chromosomes=\"XY\", sry=1,\n               volume = rnorm(ngroup, XY, sd=std)),\n    data.frame(group=\"XYSry\", gonad=\"T\", chromosomes=\"XY\", sry=2,\n               volume = rnorm(ngroup, XYSry, sd=std))\n  )\n}\n```\n:::\n\n\n\nLet's see what a few different scenarios look like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngonads <- generateFCGRatData(XX=0, XXSry=2, XY=2, XYSry=2, ngroup = 500) %>%\n  mutate(contrast = \"Gonad\")\nchrom <- generateFCGRatData(XX=0, XXSry=0, XY=2, XYSry=2, ngroup = 500) %>%\n  mutate(contrast = \"Chromosomes\")\nsry <- generateFCGRatData(XX=0, XXSry=2, XY=2, XYSry=4, ngroup = 500) %>%\n  mutate(contrast = \"Sry\")\n  \nrbind(gonads, chrom, sry) %>%\nggplot() + \n  aes(x=group, y=volume, fill=chromosomes) + \n  geom_boxplot() + \n  facet_wrap(~gonad, scales=\"free_x\") +\n  scale_fill_brewer(palette = \"Set1\") + \n  facet_grid(contrast ~ .) + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nCan we appropriately detect the right effects in those models, focusing first on analyzing gonads and chromosomes?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm(volume ~ gonad + chromosomes, data=gonads))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ gonad + chromosomes, data = gonads)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.8756 -0.6872  0.0102  0.7343  3.1346 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -0.08300    0.04609  -1.801   0.0719 .  \ngonadT         2.01885    0.06518  30.973   <2e-16 ***\nchromosomesXY  0.02316    0.05645   0.410   0.6816    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.031 on 1997 degrees of freedom\nMultiple R-squared:  0.4225,\tAdjusted R-squared:  0.422 \nF-statistic: 730.6 on 2 and 1997 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lm(volume ~ gonad + chromosomes, data=chrom))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ gonad + chromosomes, data = chrom)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.4137 -0.6712  0.0006  0.6486  3.3420 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    0.01415    0.04415   0.321    0.749    \ngonadT        -0.02937    0.06244  -0.470    0.638    \nchromosomesXY  1.99849    0.05407  36.958   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9873 on 1997 degrees of freedom\nMultiple R-squared:  0.5027,\tAdjusted R-squared:  0.5023 \nF-statistic:  1010 on 2 and 1997 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nYes. What about treating sry as an ordered factor (i.e. assuming that a dose of 2 is more than a dose of 1, but not assuming that it is purely linear).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm(volume ~ sry + chromosomes, data=gonads %>% mutate(sry=as.ordered(sry))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ sry + chromosomes, data = gonads %>% mutate(sry = as.ordered(sry)))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.8941 -0.6866  0.0108  0.7368  3.1346 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    1.27522    0.04065  31.367   <2e-16 ***\nsry.L          1.45367    0.06519  22.298   <2e-16 ***\nsry.Q         -0.80910    0.03764 -21.496   <2e-16 ***\nchromosomesXY  0.00468    0.06519   0.072    0.943    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.031 on 1996 degrees of freedom\nMultiple R-squared:  0.4226,\tAdjusted R-squared:  0.4218 \nF-statistic:   487 on 3 and 1996 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lm(volume ~ sry + chromosomes, data=chrom %>% mutate(sry=as.ordered(sry))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ sry + chromosomes, data = chrom %>% mutate(sry = as.ordered(sry)))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.4013 -0.6672 -0.0009  0.6498  3.3296 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   -0.013689   0.038946  -0.351    0.725    \nsry.L         -0.038291   0.062453  -0.613    0.540    \nsry.Q          0.001874   0.036057   0.052    0.959    \nchromosomesXY  2.010883   0.062453  32.198   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9875 on 1996 degrees of freedom\nMultiple R-squared:  0.5028,\tAdjusted R-squared:  0.502 \nF-statistic: 672.8 on 3 and 1996 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lm(volume ~ sry + chromosomes, data=sry %>% mutate(sry=as.ordered(sry))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = volume ~ sry + chromosomes, data = sry %>% mutate(sry = as.ordered(sry)))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.1755 -0.6923 -0.0411  0.6464  3.1876 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    2.05109    0.03977  51.569   <2e-16 ***\nsry.L          2.94565    0.06378  46.185   <2e-16 ***\nsry.Q         -0.01815    0.03682  -0.493    0.622    \nchromosomesXY -0.03225    0.06378  -0.506    0.613    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.008 on 1996 degrees of freedom\nMultiple R-squared:  0.6779,\tAdjusted R-squared:  0.6774 \nF-statistic:  1400 on 3 and 1996 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nStill works but is a bit more unstable. Some interpretation aids to these models - when treating sry as an ordered factor, there are two possible trends - a linear trends, indicating that with every increase in sry there is an increase in the outcome, and a quadratic trend, indicating that going from 1 to 2 is not the same as going from 0 to 1. So in our third model where we artificially simulated an increase with every dose of sry there is a linear increase (sry.L), but no quadratic increase (sry.Q is non-significant). But in the gonad model there is both a linear and a quadratic effect, since having 2 sry copies (WT + transgene) has the same effect as having one sry copy.\n\nWhat about power? First just looking at the gonads + chromosomes model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimRatNtimes <- function(nsims=100, effectSize=2, ngroup=20) {\n  ratG <- map(1:nsims, ~ generateFCGRatData(XX=0,\n                                            XXSry=effectSize,\n                                            XY=effectSize,\n                                            XYSry=effectSize,\n                                            ngroup=ngroup))\n  ratC <- map(1:nsims, ~ generateFCGRatData(XX=0,\n                                            XXSry=0,\n                                            XY=effectSize,\n                                            XYSry=effectSize,\n                                            ngroup=ngroup))\n  \n  lratG <- map(ratG, ~ lm(volume ~ gonad + chromosomes, data=.x))\n  lratC <- map(ratC, ~ lm(volume ~ gonad + chromosomes, data=.x))\n  \n  tlratG <- map(lratG, tidy)\n  tlratC <- map(lratC, tidy)\n  \n  data.frame(\n    gonads = map_dbl(tlratG, ~.x %>% filter(term == \"gonadT\") %>% pull(p.value)),\n    chromosomes = map_dbl(tlratC, ~.x %>% filter(term == \"chromosomesXY\") %>% pull(p.value))\n  )\n  \n}\n\nallRatSims <- map(seq(0, 2, by=0.1), ~ simRatNtimes(nsims=200, effectSize=.x, ngroup = 10) %>% mutate(d=.x))\npowerDF <- map_dfr(allRatSims, ~ .x) %>% group_by(d) %>% summarise_at(vars(gonads:chromosomes), function(x) mean(x<0.05))\n\npowerDF %>% \n  pivot_longer(gonads:chromosomes, values_to = \"power\") %>% \n  ggplot() + aes(x=d, y=power, colour=name) + \n  geom_smooth(method=\"gam\", formula=y~s(x, k=8), se=F) + \n  scale_color_brewer(\"Model\", palette = \"Dark2\") + \n  theme_classic() + \n  xlab(\"Simulated effect size\") + \n  labs(title=\"Power of FCG-like rat study\", \n       subtitle=\"Modelling gonads + chromosomes\",\n       caption =\"Assuming n=10 per group\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nGiven the unbalanced design for gonads there is some power differential, in that it is easier to detect a chromosome effect than a gonad effect.\n\nAnd if we model sry as an ordered factor?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimRatNtimesOF <- function(nsims=100, effectSize=2, ngroup=20) {\n  ratG <- map(1:nsims, ~ generateFCGRatData(XX=0,\n                                            XXSry=effectSize,\n                                            XY=effectSize,\n                                            XYSry=effectSize,\n                                            ngroup=ngroup) %>%\n    mutate(sry = as.ordered(sry))) \n  ratC <- map(1:nsims, ~ generateFCGRatData(XX=0,\n                                            XXSry=0,\n                                            XY=effectSize,\n                                            XYSry=effectSize,\n                                            ngroup=ngroup) %>%\n    mutate(sry = as.ordered(sry))) \n  ratS <- map(1:nsims, ~ generateFCGRatData(XX=0,\n                                            XXSry=effectSize,\n                                            XY=effectSize,\n                                            XYSry=effectSize*2,\n                                            ngroup=ngroup) %>%\n    mutate(sry = as.ordered(sry))) \n  \n  lratG <- map(ratG, ~ lm(volume ~ sry + chromosomes, data=.x))\n  lratC <- map(ratC, ~ lm(volume ~ sry + chromosomes, data=.x))\n  lratS <- map(ratS, ~ lm(volume ~ sry + chromosomes, data=.x))\n  \n  tlratG <- map(lratG, tidy)\n  tlratC <- map(lratC, tidy)\n  tlratS <- map(lratS, tidy)\n  \n  data.frame(\n    gonads = map_dbl(tlratG, ~.x %>% filter(term == \"sry.L\") %>% pull(p.value)),\n    chromosomes = map_dbl(tlratC, ~.x %>% filter(term == \"chromosomesXY\") %>% pull(p.value)),\n    sryL = map_dbl(tlratS, ~.x %>% filter(term == \"sry.L\") %>% pull(p.value)),\n    sryQ = map_dbl(tlratS, ~.x %>% filter(term == \"sry.Q\") %>% pull(p.value))\n  )\n  \n}\n\nallRatSims <- map(seq(0, 2, by=0.1), ~ simRatNtimesOF(nsims=200, effectSize=.x, ngroup = 10) %>% mutate(d=.x))\npowerDF <- map_dfr(allRatSims, ~ .x) %>% group_by(d) %>% summarise_at(vars(gonads:sryQ), function(x) mean(x<0.05))\n\npowerDF %>% \n  pivot_longer(gonads:sryQ, values_to = \"power\") %>% \n  ggplot() + aes(x=d, y=power, colour=name) + \n  geom_smooth(method=\"gam\", formula=y~s(x, k=8), se=F) + \n  scale_color_brewer(\"Model\", palette = \"Dark2\") + \n  theme_classic() + \n  xlab(\"Simulated effect size\") + \n  labs(title=\"Power of FCG-like rat study\", \n       subtitle=\"Modelling sry + chromosomes\",\n       caption =\"Assuming n=10 per group\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nHere the *gonads* model looks at the linear part of the sry term when there is a change in the presence of sry but no dosage effect. *sryL* looks at the linear term when there is a dosage effect, which is now the most powered term (since there are three possible steps), and *sryQ* looks at the quadratic effect when there is a simulated dosage effect which is rightly 0.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}